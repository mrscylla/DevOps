#Использовать InternetMail
#Использовать logos
#Использовать configor

Перем Журнал;

Перем ПараметрыЗадания;
Перем ПараметрыТелеграмБота;
Перем ПараметрыПочты;

//Для логирования
Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Процедура ПрочитатьНастройкиБазДанных()

	Сценарий = СтартовыйСценарий();

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.УстановитьФайлПараметров(ОбъединитьПути(Сценарий.Каталог, "db_info.json"));
	МенеджерПараметров.АвтоНастройка("");
	МенеджерПараметров.Прочитать();

	Если Не МенеджерПараметров.ЧтениеВыполнено() Тогда
		Журнал.КритическаяОшибка("Не удалось прочитать параметры из файла");
		ЗавершитьРаботу(-1);
	КонецЕсли;

	ПараметрыПочты = МенеджерПараметров.Параметр("email");
	ПараметрыТелеграмБота = МенеджерПараметров.Параметр("telegram");
	
	МассивПараметровБазДанных = МенеджерПараметров.Параметр("bases");
	Для Каждого Элемент Из МассивПараметровБазДанных Цикл
		Если Элемент["ibname"] = ПараметрыЗадания.БазаПриемник Тогда
			ПараметрыЗадания.Вставить("ПочтовыйАдрес", 	Элемент["email"]);
			ПараметрыЗадания.Вставить("Телеграм", 		Элемент["telegram"]);
			ПараметрыЗадания.Вставить("ВладелецБазы",	Элемент["owner"]);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура Оповестить(ТипОповещения = "Окончание")
	
	ТекстСообщения = "";
	
	Если ТипОповещения = "Окончание" Тогда	
		ТекстСообщения = СтрШаблон("Загрузка последней копии базы %1 завершена!", ПараметрыЗадания.БазаПриемник);
	Иначе
		ТекстСообщения = СтрШаблон("Началась загрузка последней копии базы %1! 
		| О завершении будет сообщено дополнительно.", ПараметрыЗадания.БазаПриемник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадания.ПочтовыйАдрес) Тогда		
		Попытка	
			ОтправитьПочтовоеСообщение(ПараметрыЗадания.ПочтовыйАдрес, ТекстСообщения);
		Исключение			
			//Журнал.Информация("Ошибка отправки оповещения:" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗадания.Телеграм) Тогда	
		Попытка	
			ТекстЗапроса = СтрШаблон("/bot%1:%2/sendMessage?chat_id=%3&text=%4",
				ПараметрыТелеграмБота.Идентификатор,
				ПараметрыТелеграмБота.Токен,
				ПараметрыЗадания.Телеграм,
				ТекстСообщения
			);

			Запрос = Новый HTTPЗапрос(ТекстЗапроса);			
			Соединение = Новый HTTPСоединение("api.telegram.org", , , , , 30);
			Соединение.Получить(Запрос);		
		Исключение			
			//Журнал.Информация("Ошибка отправки оповещения:" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЕсли;	

КонецПроцедуры

Процедура ОтправитьПочтовоеСообщение(Адрес, ТекстСообщения)

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераSMTP 	= ПараметрыПочты["server"];
	Профиль.ПортSMTP 			= ПараметрыПочты["port"];
	Профиль.ПользовательSMTP 	= ПараметрыПочты["user"];
	Профиль.ПарольSMTP 			= ПараметрыПочты["password"];
	Профиль.Таймаут 			= 30;


	Почта = Новый ИнтернетПочта;
	Почта.Подключиться(Профиль);

	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Отправитель = ПараметрыПочты["user"];
	Сообщение.Тема = "Уведомление о загрузке SQL копии базы";
	
	Текст = Сообщение.Тексты.Добавить(ТекстСообщения);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст; 
	Адрес = Сообщение.Получатели.Добавить(Адрес);
	
	Почта.Послать(Сообщение, , ПротоколИнтернетПочты.SMTP);
	Почта.Отключиться();

КонецПроцедуры

Процедура РазобратьВходящиеПараметры()

	ПараметрыЗадания = Новый Соответствие;

	// ТипБазы-Суффикс[-НомерСервера]
	// НомерСервера указывается, если он отличен от rtits-1c-04
	// Примеры: erp-aaz, erp-aaz-03
	ИмяРодительскогоПлана = АргументыКоманднойСтроки[0]; 
	ПараметрыЗадания.Вставить("РабочийКаталог", АргументыКоманднойСтроки[1]);

	ЧастиИмениПлана = СтрРазделить(ИмяРодительскогоПлана, "-");
	ЧастиИмениПлана.Удалить(ЧастиИмениПлана.Количество() - 1);

	ПараметрыЗадания.Вставить("ТипБазы", ЧастиИмениПлана[1]); // erp/ecm
	ИмяПланаВрем = СтрСоединить(ЧастиИмениПлана, "_");

	ПараметрыЗадания.Вставить("БазаИсточник", СтрШаблон("%1_Production", ЧастиИмениПлана[0]));

	// ГОСТ 5812-2014
	Если СтрНайти(ИмяПланаВрем, "0") > 0 Тогда
		НомерСервера = Сред(ИмяПланаВрем, СтрНайти(ИмяПланаВрем, "0"));
	Иначе
		НомерСервера = "04";
	КонецЕсли;

	ПараметрыЗадания.Вставить("ЦелевойСервер", СтрШаблон("RTITS-1C-%1", НомерСервера));
	ПараметрыЗадания.Вставить("БазаПриемник", Сред(ИмяПланаВрем, 1, СтрНайти(ИмяПланаВрем, "0") - 1));

КонецПроцедуры

Процедура ИнициализироватьЛоги()

	ИмяФайлаЖурнала = ОбъединитьПути(ПараметрыЗадания.РабочийКаталог, 
		"Logs", 
		ПараметрыЗадания.БазаПриемник, 
		СтрШаблон("%1_lsql.log", ПараметрыЗадания.ТипБазы)
	);

	Файл = Новый Файл(ИмяФайлаЖурнала);
	СоздатьКаталог(Файл.Путь);
	КаталогЖурналов = Файл.Путь;

	Журнал = Логирование.ПолучитьЛог("load_sql_copy.app.loading");
	Журнал.УстановитьУровень(УровниЛога.Информация);
	Журнал.УстановитьРаскладку(ЭтотОбъект);

	КонсольЖурн = Новый ВыводЛогаВКонсоль;
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ИмяФайлаЖурнала, "windows-1251");

	Журнал.ДобавитьСпособВывода(ФайлЖурнала);
	Журнал.ДобавитьСпособВывода(КонсольЖурн);

КонецПроцедуры

Процедура ВосстановитьБазуИзАрхива()

	ПрочитатьНастройкиБазДанных();
	
	Оповестить("Начало");

	Журнал.Информация(СтрШаблон("Запуск загрузки копии из SQL для %1 в %2", 
		ПараметрыЗадания.БазаИсточник,
		ПараметрыЗадания.БазаПриемник)
	);

	Сценарий = СтартовыйСценарий();
	ФайлСкрипта = ОбъединитьПути(Сценарий.Каталог, "LoadBackupFileToDB.sql");

	ИсполняемыйФайл = "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\SQLCMD.EXE";
	ФайлАрхива = СтрШаблон("\\RTITS-1C-04\DBBACKUP$\%1 Copy.bak", ПараметрыЗадания.БазаИсточник);

	ФайлЛога = СтрШаблон("%1\Logs\sql.log", ПараметрыЗадания.РабочийКаталог);

	Команда = СтрШаблон("""%1"" -S tcp:%2 -v sourcedb=""%3"" db=""%4"" bakfile=""%5"" owner=""%6"" -i %7 -o ""%8""",
		ИсполняемыйФайл,
		ПараметрыЗадания.ЦелевойСервер,
		ПараметрыЗадания.БазаИсточник,
		ПараметрыЗадания.БазаПриемник,
		ФайлАрхива,
		ПараметрыЗадания.ВладелецБазы,
		ФайлСкрипта,
		ФайлЛога
	);

	Журнал.Информация(СтрШаблон("Команда: %1", Команда));
	ПроцессSqlCMD = СоздатьПроцесс(Команда);

	ПроцессSqlCMD.Запустить();										
	ПроцессSqlCMD.ОжидатьЗавершения();

	Вывод  = СокрЛП(ПроцессSqlCMD.ПотокВывода.Прочитать());
	Ошибки = СокрЛП(ПроцессSqlCMD.ПотокОшибок.Прочитать());

	Журнал.Информация(СтрШаблон("Загрузка копии закончена. Вывод команды (%1
		|%2)", Вывод,  Ошибки));

	Оповестить("Окончание");

КонецПроцедуры

РазобратьВходящиеПараметры();
ИнициализироватьЛоги();
ВосстановитьБазуИзАрхива();
