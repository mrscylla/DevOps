#Использовать cmdline
#Использовать logos
#Использовать v8runner

Перем git;
Перем ext_processors;

Перем Журналы;
Перем Параметры;
Перем РезультатыКоманд;
Перем КодВозврата;

Перем Конфигуратор;

//Для логирования
Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции

Процедура СоздатьРезультатыКоманд()

	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("СинтаксическийКонтроль", Истина);
	РезультатыКоманд.Вставить("ЗагрузкаИзменений", Истина);
	РезультатыКоманд.Вставить("ВыгрузкаКонфигурации", Истина);
	РезультатыКоманд.Вставить("ВыгрузкаОбработок", Истина);
	РезультатыКоманд.Вставить("ЗагрузкаОбработок", Истина);

КонецПроцедуры

Процедура РазобратьВходящиеПараметры()
	
	АргументыКС = Новый ПарсерАргументовКоманднойСтроки();
	АргументыКС.ДобавитьИменованныйПараметр("-repo");
	АргументыКС.ДобавитьИменованныйПараметр("-branch");
	АргументыКС.ДобавитьИменованныйПараметр("-ibname");
	АргументыКС.ДобавитьИменованныйПараметр("-srvname");
	АргументыКС.ДобавитьИменованныйПараметр("-usr");
	АргументыКС.ДобавитьИменованныйПараметр("-pwd");
	АргументыКС.ДобавитьИменованныйПараметр("-fastupdate");
	АргументыКС.ДобавитьИменованныйПараметр("-fixedchanges");
	АргументыКС.ДобавитьИменованныйПараметр("-dpath");
	АргументыКС.ДобавитьИменованныйПараметр("-logs");
	АргументыКС.ДобавитьИменованныйПараметр("-deploycfg");
	АргументыКС.ДобавитьИменованныйПараметр("-deployext");
	АргументыКС.ДобавитьИменованныйПараметр("-loadall");
	АргументыКС.ДобавитьИменованныйПараметр("-fromHash");
	АргументыКС.ДобавитьИменованныйПараметр("-toHash");
	АргументыКС.ДобавитьИменованныйПараметр("-db");
	АргументыКС.ДобавитьИменованныйПараметр("-loadchanges");
	АргументыКС.ДобавитьИменованныйПараметр("-loadextension");
	АргументыКС.ДобавитьИменованныйПараметр("-updatecfgdump");
	АргументыКС.ДобавитьИменованныйПараметр("-updatedb");
	АргументыКС.ДобавитьИменованныйПараметр("-syntaxctrl");
	АргументыКС.ДобавитьИменованныйПараметр("-saveExtProc");
	АргументыКС.ДобавитьИменованныйПараметр("-dumpExtProc");
	АргументыКС.ДобавитьИменованныйПараметр("-buildExtProc");
	АргументыКС.ДобавитьИменованныйПараметр("-loadExtProc");
	АргументыКС.ДобавитьИменованныйПараметр("-extProcPath");
	
	ПараметрыКС = АргументыКС.Разобрать(АргументыКоманднойСтроки);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПутьКРепозиторию", 			ПараметрыКС["-repo"]);
	Параметры.Вставить("ИмяВетки", 					ПараметрыКС["-branch"]);
	Параметры.Вставить("ИмяСервера", 				ПараметрыКС["-srvname"]);
	Параметры.Вставить("ИмяБазы", 					ПараметрыКС["-ibname"]);
	Параметры.Вставить("Пользователь", 				ПараметрыКС["-usr"]);
	Параметры.Вставить("Пароль", 					ПараметрыКС["-pwd"]);
	Параметры.Вставить("БыстроеОбновление", 		ПараметрыКС["-fastupdate"] = "true");
	Параметры.Вставить("ЗагрузкаИзмененийПоФайлу", 	ПараметрыКС["-fixedchanges"] = "true");
	Параметры.Вставить("ПутьКПоставке", 			ПараметрыКС["-dpath"]);
	Параметры.Вставить("ПутьКЛогам", 				ПараметрыКС["-logs"]);
	Параметры.Вставить("ВыгружатьКонфигурацию", 	ПараметрыКС["-deploycfg"] = "true");
	Параметры.Вставить("ВыгружатьРасширение", 		ПараметрыКС["-deployext"] = "true");
	Параметры.Вставить("ЗагрузитьВсе", 				ПараметрыКС["-loadall"] = "true");
	Параметры.Вставить("ПервыйХеш", 				ПараметрыКС["-fromHash"]);
	Параметры.Вставить("ВторойХеш", 				ПараметрыКС["-toHash"]);
	Параметры.Вставить("ЗагрузитьИзменения", 		Не ПараметрыКС["-loadchanges"] = "false");
	Параметры.Вставить("ЗагрузитьРасширение", 		Не ПараметрыКС["-loadextension"] = "false");
	Параметры.Вставить("ОбновитьДампКонфигурации", 	Не ПараметрыКС["-updatecfgdump"] = "false");
	Параметры.Вставить("ОбновитьБазуДанных", 		Не ПараметрыКС["-updatedb"] = "false");
	Параметры.Вставить("СинтаксическийКонтроль", 	ПараметрыКС["-syntaxctrl"] = "true");
	Параметры.Вставить("СохранитьОбработки",	 	ПараметрыКС["-saveExtProc"] = "true");
	Параметры.Вставить("РазобратьОбработки",	 	ПараметрыКС["-dumpExtProc"] = "true");
	Параметры.Вставить("СобратьОбработки",	 		ПараметрыКС["-buildExtProc"] = "true");
	Параметры.Вставить("ЗагрузитьОбработки", 		ПараметрыКС["-loadExtProc"] = "true");
	Параметры.Вставить("КаталогОбработок",		 	ПараметрыКС["-extProcPath"]);
	
	Если Не ЗначениеЗаполнено(Параметры.ПутьКЛогам) Тогда
		Параметры.ПутьКЛогам = Параметры.ПутьКПоставке;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЖурналыЛогирования()
	
	Журналы = Новый Структура;
	
	КаталогЖурналов = ОбъединитьПути(Параметры.ПутьКЛогам, Параметры.ИмяБазы);
	Если Не ПустаяСтрока(Параметры.ИмяВетки) Тогда	
		ИмяФайлаЖурнала = СтрШаблон("%1.log", СтрЗаменить(Параметры.ИмяВетки, "/", "_"));
	Иначе
		ИмяФайлаЖурнала = "default.log";
	КонецЕсли;
	ИмяФайлаЖурнала = ОбъединитьПути(КаталогЖурналов, ИмяФайлаЖурнала);

	СоздатьКаталог(КаталогЖурналов);
	
	Журналы.Вставить("ОсновнойЖурнал", Логирование.ПолучитьЛог("load_changes.app.loading"));
	Журналы.ОсновнойЖурнал.УстановитьУровень(УровниЛога.Отладка);
	Журналы.ОсновнойЖурнал.УстановитьРаскладку(ЭтотОбъект);
	
	Журналы.Вставить("Вложенные", Новый Структура);
	Журналы.Вложенные.Вставить("КонсольныйЖурнал", Новый ВыводЛогаВКонсоль);
	Журналы.Вложенные.Вставить("ФайловыйЖурнал", Новый ВыводЛогаВФайл);
	Журналы.Вложенные.ФайловыйЖурнал.ОткрытьФайл(ИмяФайлаЖурнала, "windows-1251");
	
	Журналы.ОсновнойЖурнал.ДобавитьСпособВывода(Журналы.Вложенные.КонсольныйЖурнал);
	Журналы.ОсновнойЖурнал.ДобавитьСпособВывода(Журналы.Вложенные.ФайловыйЖурнал);
	
	Журналы.Вставить("ЖурналЗагрузкиИзменений", 				ОбъединитьПути(КаталогЖурналов, СтрШаблон("LoadChanges_%1.log", 		Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналЗагрузкиИзмененийРасширения", 		ОбъединитьПути(КаталогЖурналов, СтрШаблон("LoadChanges_ext_%1.log", 	Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналВыгрузкиФайлаПоставки", 			ОбъединитьПути(КаталогЖурналов, СтрШаблон("Deploy_%1.log", 				Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналВыгрузкиФайлаПоставкиРасширения", 	ОбъединитьПути(КаталогЖурналов, СтрШаблон("Deploy_%1_ext.log", 			Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналСинтаксическогоКонтроля", 			ОбъединитьПути(КаталогЖурналов, СтрШаблон("CheckModules_%1.log", 		Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналСинтаксическогоКонтроляРасширения", ОбъединитьПути(КаталогЖурналов, СтрШаблон("CheckModules_%1_ext.log",	Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналОбновленияДампа",					ОбъединитьПути(КаталогЖурналов, СтрШаблон("UpdConfigDump_%1.log", 		Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналСпискаФайлов", 						ОбъединитьПути(КаталогЖурналов, СтрШаблон("%1_LastFiles.log", 			Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналВыгрузкиОбработок",					ОбъединитьПути(КаталогЖурналов, СтрШаблон("SaveExtProcessors_%1.log", 	Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналРазборкиОбработок",					ОбъединитьПути(КаталогЖурналов, СтрШаблон("DumpExtProcessors_%1.log", 	Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналСборкиОбработок",					ОбъединитьПути(КаталогЖурналов, СтрШаблон("BuildExtProcessors_%1.log", 	Параметры.ИмяБазы)));
	Журналы.Вставить("ЖурналЗагрузкиОбработок",					ОбъединитьПути(КаталогЖурналов, СтрШаблон("LoadExtProcessors_%1.log", 	Параметры.ИмяБазы)));
	
КонецПроцедуры

Функция ОбязательныеПараметры()

	ОбязательныеПараметры = Новый Массив;
	ОбязательныеПараметры.Добавить("ИмяСервера");
	ОбязательныеПараметры.Добавить("ИмяБазы");
	ОбязательныеПараметры.Добавить("Пользователь");
	ОбязательныеПараметры.Добавить("Пароль");
	ОбязательныеПараметры.Добавить("ПутьКЛогам");

	Если Параметры.ЗагрузитьИзменения Или Параметры.ЗагрузитьВсе Тогда
		ОбязательныеПараметры.Добавить("ПутьКРепозиторию");
		ОбязательныеПараметры.Добавить("ИмяВетки");
	КонецЕсли;

	Если Параметры.ЗагрузитьРасширение Или Параметры.ЗагрузитьВсе Тогда
		ОбязательныеПараметры.Добавить("ПутьКРепозиторию");
	КонецЕсли;

	Если Параметры.ВыгружатьКонфигурацию Или Параметры.ВыгружатьРасширение Тогда
		ОбязательныеПараметры.Добавить("ПутьКПоставке");
	КонецЕсли;

	Если Параметры.РазобратьОбработки Или Параметры.СобратьОбработки Тогда
		ОбязательныеПараметры.Добавить("ПутьКРепозиторию");
		ОбязательныеПараметры.Добавить("КаталогОбработок");
	КонецЕсли;

	Если Параметры.СохранитьОбработки Или Параметры.ЗагрузитьОбработки Тогда
		ОбязательныеПараметры.Добавить("КаталогОбработок");
	КонецЕсли;

	Возврат СвернутьМассив(ОбязательныеПараметры);

КонецФункции

// Возвращает копию исходного массива с уникальными значениями.
Функция СвернутьМассив(Массив)

	Результат = Новый Массив;
	
	Для Каждого Значение Из Массив Цикл
		Если Результат.Найти(Значение) = Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
 
КонецФункции

Функция ПроверкаЗаполненияПараметров()
	
	Результат = Истина;
	
	ОбязательныеПараметры = ОбязательныеПараметры();
	Для Каждого Элемент Из ОбязательныеПараметры Цикл
		Если Не ЗначениеЗаполнено(Параметры[Элемент]) Тогда
			Журналы.ОсновнойЖурнал.Ошибка(СтрШаблон("Не заполнен параметр %1!", Элемент));
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьСинтаксическийКонтрольОсновнойКонфигурации()
	
	Если Не Параметры.СинтаксическийКонтроль Тогда
		Возврат;
	КонецЕсли;
	
	Журналы.ОсновнойЖурнал.Информация("Проведение синтаксического контроля модулей основной конфигурации");
	
	ПараметрыПроверки = "-ThinClient -WebClient -Server -ExternalConnection";
	Результат = ВыполнитьСинтаксическийКонтроль(ПараметрыПроверки, Журналы.ЖурналСинтаксическогоКонтроля);
	
	Если Результат Тогда
		Сообщение = СтрШаблон("Синтаксический контроль модулей конфигурации %1 завершен успешно!", Параметры.ИмяБазы);
	Иначе
		РезультатыКоманд.СинтаксическийКонтроль = Ложь;
		Сообщение = СтрШаблон("Синтаксический контроль модулей конфигурации %1 завершен с ошибками!", Параметры.ИмяБазы);
	КонецЕсли;

	Журналы.ОсновнойЖурнал.Предупреждение(Сообщение);

КонецПроцедуры

Процедура ВыполнитьСинтаксическийКонтрольРасширения()
	
	Если Не Параметры.СинтаксическийКонтроль Тогда
		Возврат;
	КонецЕсли;
	
	Журналы.ОсновнойЖурнал.Информация("Проведение синтаксического контроля модулей расширения");
	
	ПараметрыПроверки = "-ThinClient -WebClient -Server -ExternalConnection -AllExtensions";
	Результат = ВыполнитьСинтаксическийКонтроль(ПараметрыПроверки, Журналы.ЖурналСинтаксическогоКонтроляРасширения);

	Если Результат Тогда
		Сообщение = СтрШаблон("Синтаксический контроль модулей расширения %1 завершен успешно!", Параметры.ИмяБазы);
	Иначе
		РезультатыКоманд.СинтаксическийКонтроль = Ложь;
		Сообщение = СтрШаблон("Синтаксический контроль модулей расширения %1 завершен с ошибками!", Параметры.ИмяБазы);
	КонецЕсли;
	
	Журналы.ОсновнойЖурнал.Информация(Сообщение);

КонецПроцедуры

Функция ВыполнитьСинтаксическийКонтроль(ПараметрыПроверки, ЖурналКонтроля)
	// /CheckModules [-ThinClient] [-WebClient] [-Server] [-ExternalConnection] [-ThickClientOrdinaryApplication] 
	// [-MobileAppClient] [-MobileAppServer] [-ExtendedModulesCheck]
	РезультатКоманды = Истина;

	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(ЖурналКонтроля);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить(СтрШаблон("/CheckModules %1", ПараметрыПроверки));
	
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		РезультатКоманды = Ложь;
	КонецПопытки;
	
	Возврат РезультатКоманды;
	
КонецФункции

Функция МассивКоммитов()

	Перем Результат;

	Если ЗначениеЗаполнено(Параметры.ПервыйХеш) И ЗначениеЗаполнено(Параметры.ВторойХеш) Тогда
		Результат = Новый Массив;
		Результат.Добавить(Параметры.ПервыйХеш);
		Результат.Добавить(Параметры.ВторойХеш);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПодготовитьСписокИзмененныхФайлов(ПутьВременногоКаталогаЗагрузки)

	Если Параметры.ЗагрузкаИзмененийПоФайлу Тогда
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Использую существующий список файлов %1", Журналы.ЖурналСпискаФайлов));
		КоличествоИзменений = 1;
	Иначе
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Формирую список измененных файлов в %1", Журналы.ЖурналСпискаФайлов));
		
		// Переключить ветку GIT на "ИмяВетки"
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Переход на ветку %1 в репозитории %2", 
													Параметры.ИмяВетки, Параметры.ПутьКРепозиторию));
		git.ПерейтиНаВетку(Параметры.ПутьКРепозиторию, Параметры.ИмяВетки);

		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Получение списка измененных файлов из %1", Параметры.ПутьКРепозиторию));
		git.ПолучитьСписокИзмененийВФайл(ПутьВременногоКаталогаЗагрузки, Журналы.ЖурналСпискаФайлов, 
											Журналы.ОсновнойЖурнал, МассивКоммитов());

		КоличествоИзменений = git.ОбработатьФайлИзменений(ПутьВременногоКаталогаЗагрузки, 
									git.РежимыОтслеживаемыхИзменений.ОсновнаяКонфигурация, 
									Журналы.ЖурналСпискаФайлов, 
									Журналы.ОсновнойЖурнал);

		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Временный репо для ч. загрузки: %1", ПутьВременногоКаталогаЗагрузки));

	КонецЕсли;

	Возврат КоличествоИзменений;

КонецФункции

Процедура ВыполнитьЗагрузкуИзмененийОсновнойКонфигурации()
	
	// Загрузка изменений в конфигурацию и расширение (Необходимые параметры: ПутьКРепозиторию, ИмяВетки)
	Если Не Параметры.ЗагрузитьИзменения И Не Параметры.ЗагрузитьВсе Тогда
		Возврат;
	КонецЕсли;

	// Получить список измененных файлов текущей ветки GIT
	ПутьВременногоКаталогаЗагрузки = Параметры.ПутьКРепозиторию;

	ЧастичнаяЗагрузка = Ложь;
	Если Параметры.ЗагрузитьВсе Тогда
		Журналы.ОсновнойЖурнал.Информация("Начало полной загрузки основной конфигурации из файлов");
		ДополнительныеКлючи = "";
	
	Иначе
		КоличествоИзменений = ПодготовитьСписокИзмененныхФайлов(ПутьВременногоКаталогаЗагрузки);
		Если Не КоличествоИзменений Тогда
			Журналы.ОсновнойЖурнал.Информация("Отсутствуют изменения в репозитории ""%1""", Параметры.ПутьКРепозиторию);
			Возврат;
		КонецЕсли;

		ЧастичнаяЗагрузка = Истина;
		Журналы.ОсновнойЖурнал.Информация("Начало частичной загрузки основной конфигурации из файлов");
		ДополнительныеКлючи = СтрШаблон("-ListFile %1", Журналы.ЖурналСпискаФайлов);
	КонецЕсли;
	
	// Загрузка основной конфигурации
	КаталогИзменений = ОбъединитьПути(ПутьВременногоКаталогаЗагрузки, "Config");	
	Результат = ВыполнитьЗагрузкуИзменений(КаталогИзменений, ДополнительныеКлючи, 
													Параметры.ОбновитьБазуДанных, Журналы.ЖурналЗагрузкиИзменений);

	ТипЗагрузки = ?(ЧастичнаяЗагрузка, "Частичная", "Полная");													
	Если Результат Тогда												
		Сообщение = СтрШаблон("%1 загрузка из файлов успешно завершена (см. %2)", 
													ТипЗагрузки,
													Журналы.ЖурналЗагрузкиИзменений);
	Иначе
		РезультатыКоманд.ЗагрузкаИзменений = Ложь;
		Сообщение = СтрШаблон("%1 загрузка из файлов не удалась (см. %2)", 
													ТипЗагрузки,
					 								Журналы.ЖурналЗагрузкиИзменений);
	КонецЕсли;

	Журналы.ОсновнойЖурнал.Информация(Сообщение);

	Если Параметры.ОбновитьДампКонфигурации И РезультатыКоманд.ЗагрузкаИзменений Тогда
		// Возвращаем файл версии в репозиторий
		Если Не ПутьВременногоКаталогаЗагрузки = Параметры.ПутьКРепозиторию Тогда
			ДампКонфигурацииВрем = ОбъединитьПути(ПутьВременногоКаталогаЗагрузки, "Config", "ConfigDumpInfo.xml");
			ДампКонфигурацииРепо = ОбъединитьПути(Параметры.ПутьКРепозиторию, "Config", "ConfigDumpInfo.xml");

			Сообщение = СтрШаблон("Копирую рабочий каталог: %1 в %2", ДампКонфигурацииВрем, ДампКонфигурацииРепо);
			Журналы.ОсновнойЖурнал.Информация(Сообщение);

			КопироватьФайл(ДампКонфигурацииВрем, ДампКонфигурацииРепо);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьЗагрузкуИзмененийРасширения()

	Если Не РезультатыКоманд.ЗагрузкаИзменений Тогда
		Возврат;
	КонецЕсли;

	Если Не Параметры.ЗагрузитьРасширение И Не Параметры.ЗагрузитьВсе Тогда
		Возврат;
	КонецЕсли;			

	// Загрузка расширения конфигурации -------------------
	Журналы.ОсновнойЖурнал.Информация("Начало полной загрузки расширения из файлов.");
	
	КаталогИзменений = ОбъединитьПути(Параметры.ПутьКРепозиторию, "Extension");
	ДополнительныеКлючи = "-Extension ""Расширение_РТИТС""";
	
	Результат = ВыполнитьЗагрузкуИзменений(КаталогИзменений, ДополнительныеКлючи, 
				Параметры.ОбновитьБазуДанных, Журналы.ЖурналЗагрузкиИзмененийРасширения);

	
	Если Результат Тогда												
		Сообщение = СтрШаблон("Обновление расширения для базы %1 завершено успешно", Параметры.ИмяБазы);
	Иначе
		РезультатыКоманд.ЗагрузкаИзменений = Ложь;
		Сообщение = СтрШаблон("Обновление расширения для базы %1 завершено неуспешно", Параметры.ИмяБазы);
	КонецЕсли;
	
	Журналы.ОсновнойЖурнал.Информация(Сообщение);

КонецПроцедуры

Функция ВыполнитьЗагрузкуИзменений(КаталогИзменений, ДополнительныеКлючи, ОбновитьБазуДанных, Журнал)

	РезультатКоманды = Истина;

	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(Журнал);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить(СтрШаблон("/LoadConfigFromFiles %1 %2 %3", 
				КаталогИзменений, ДополнительныеКлючи, ?(Параметры.ОбновитьДампКонфигурации, "-updateConfigDumpInfo", "")));

	Если ОбновитьБазуДанных Тогда
		ПараметрыЗапуска.Добавить(СтрШаблон("/UpdateDBCfg"));
	КонецЕсли;

	Попытка
		РезультатВыполнения = Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		РезультатКоманды = Ложь;
	КонецПопытки;

	Возврат РезультатКоманды;

КонецФункции

Процедура ВыполнитьВыгрузкуОсновнойКонфигурацииВФайл()

	Если Не Параметры.ВыгружатьКонфигурацию Тогда
		Возврат;
	КонецЕсли;

	Если Не РезультатыКоманд.ЗагрузкаИзменений Или Не РезультатыКоманд.СинтаксическийКонтроль Тогда
		Возврат;
	КонецЕсли;
		
	Журналы.ОсновнойЖурнал.Информация("Начало подготовки файла выгрузки конфигурации");

	ФайлВыгрузки = ОбъединитьПути(Параметры.ПутьКПоставке, Параметры.ИмяБазы, СтрШаблон("%1.cf", Параметры.ИмяБазы));
	Результат = ВыполнитьВыгрузкуКонфигурацииВФайл(ФайлВыгрузки, Журналы.ЖурналВыгрузкиФайлаПоставки);


	Если Результат Тогда
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Выгрузка конфигурации из базы %1 завершена успешно", Параметры.ИмяБазы));

		ЗаписьТекста = Новый ЗаписьТекста(ОбъединитьПути(Параметры.ПутьКПоставке, Параметры.ИмяБазы, "needupdate.flg"));
		ЗаписьТекста.ЗаписатьСтроку(ФайлВыгрузки);
		ЗаписьТекста.Закрыть();
		Журналы.ОсновнойЖурнал.Информация("Создан семафор необходимости обновления основной конфигурации");
	Иначе
		РезультатыКоманд.ВыгрузкаКонфигурации = Ложь;
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Выгрузка конфигурации из базы %1 завершена неуспешно", Параметры.ИмяБазы));
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьВыгрузкуКонфигурацииРасширенияВФайл()

	Если Не Параметры.ВыгружатьРасширение Тогда
		Возврат;
	КонецЕсли;

	Если Не РезультатыКоманд.ЗагрузкаИзменений Или Не РезультатыКоманд.СинтаксическийКонтроль Тогда
		Возврат;
	КонецЕсли;

	Журналы.ОсновнойЖурнал.Информация("Начало подготовки файла выгрузки конфигурации расширения");

	ФайлВыгрузки = ОбъединитьПути(Параметры.ПутьКПоставке, Параметры.ИмяБазы, СтрШаблон("%1_ext.cfe", Параметры.ИмяБазы));
	Результат = ВыполнитьВыгрузкуКонфигурацииВФайл(ФайлВыгрузки, Журналы.ЖурналВыгрузкиФайлаПоставкиРасширения, 
														"-Extension ""Расширение_РТИТС""");
	
	Если Результат Тогда
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Выгрузка конфигурации расширения из базы %1 завершена успешно", Параметры.ИмяБазы));

		ЗаписьТекста = Новый ЗаписьТекста(ОбъединитьПути(Параметры.ПутьКПоставке, Параметры.ИмяБазы, "needupdate_ext.flg"));
		ЗаписьТекста.ЗаписатьСтроку(ФайлВыгрузки);
		ЗаписьТекста.Закрыть();
		Журналы.ОсновнойЖурнал.Информация("Создан семафор необходимости обновления расширения рабочей базы.");
	Иначе
		РезультатыКоманд.ВыгрузкаКонфигурации = Ложь;
		Журналы.ОсновнойЖурнал.Информация(СтрШаблон("Выгрузка конфигурации расширения из базы %1 завершена неуспешно", Параметры.ИмяБазы));
	КонецЕсли;

КонецПроцедуры

Функция ВыполнитьВыгрузкуКонфигурацииВФайл(ИмяФайла, Журнал, ДополнительныеКлючи = "")

	РезультатКоманды = Истина;

	Конфигуратор.УстановитьИмяФайлаСообщенийПлатформы(Журнал);

	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить(СтрШаблон("/DumpCfg %1 %2", ИмяФайла, ДополнительныеКлючи));

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
	Исключение
		РезультатКоманды = Ложь;
	КонецПопытки;

	Возврат РезультатКоманды;

КонецФункции

Процедура ВыполнитьСохранениеОбработок()

	Если Не Параметры.СохранитьОбработки Тогда
		Возврат;
	КонецЕсли;
		
	ext_processors.ВыполнитьВыгрузкуОбработокИзИнформационнойБазы();

КонецПроцедуры

Процедура ВыполнитьРазборкуОбработок()

	Если Не Параметры.РазобратьОбработки Тогда
		Возврат;
	КонецЕсли;

	ext_processors.ВыполнитьРазборкуОбработок();

КонецПроцедуры

Процедура ВыполнитьСборкуОбработок()

	Если Не Параметры.СобратьОбработки Тогда
		Возврат;
	КонецЕсли;

	ext_processors.ВыполнитьСборкуОбработок();

КонецПроцедуры

Процедура ВыполнитьЗагрузкуОбработок()

	Если Не Параметры.ЗагрузитьОбработки Тогда
		Возврат;
	КонецЕсли;

	ext_processors.ВыполнитьЗагрузкуОбработокВИнформационнуюБазу();

КонецПроцедуры

Процедура ВыполнитьКоманды() 

	ВыполнитьЗагрузкуИзмененийОсновнойКонфигурации();
	ВыполнитьЗагрузкуИзмененийРасширения();

	Если Не РезультатыКоманд.ЗагрузкаИзменений Тогда
		ЗавершитьРаботу(-1);
	КонецЕсли;

	ВыполнитьСинтаксическийКонтрольОсновнойКонфигурации();
	ВыполнитьСинтаксическийКонтрольРасширения();

	ВыполнитьВыгрузкуОсновнойКонфигурацииВФайл();
	ВыполнитьВыгрузкуКонфигурацииРасширенияВФайл();

	ВыполнитьСохранениеОбработок();
	ВыполнитьРазборкуОбработок();
	ВыполнитьСборкуОбработок();
	ВыполнитьЗагрузкуОбработок();

КонецПроцедуры

Функция ПолучитьКодВозврата()

	КодВозврата = 0;

	Для Каждого КлючИЗачение Из РезультатыКоманд Цикл
		Если Не КлючИЗачение.Значение Тогда
			КодВозврата = -1;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат КодВозврата;

КонецФункции

Процедура ПодготовитьОкружение()

	ИнфоОСкрипте = ТекущийСценарий();
	КаталогСкрипта = ИнфоОСкрипте.Каталог;

	СтрокаПодключения = СтрШаблон("/IBConnectionString""Srvr=%1; Ref='%2'""", Параметры.ИмяСервера, Параметры.ИмяБазы);

	Конфигуратор = Новый УправлениеКонфигуратором();
	Конфигуратор.УстановитьКонтекст(СтрокаПодключения, Параметры.Пользователь, Параметры.Пароль);
	Конфигуратор.УстановитьКлючРазрешенияЗапуска("456654");

	// Нужные папки всегда создаем.
	Если Параметры.ВыгружатьКонфигурацию Или Параметры.ВыгружатьРасширение Тогда
		СоздатьКаталог(Параметры.ПутьКПоставке);	
	КонецЕсли;

	Если Параметры.СохранитьОбработки Или Параметры.ЗагрузитьОбработки Тогда
		СоздатьКаталог(Параметры.КаталогОбработок);	
	КонецЕсли;


	ПодключитьСценарий(ОбъединитьПути(КаталогСкрипта, "..\lib\git.os"), "git");
	ПодключитьСценарий(ОбъединитьПути(КаталогСкрипта, "..\lib\ext_processors.os"), "ext_processors");
	
	git = Новый git();
	ext_processors = Новый ext_processors();
	
	ext_processors.УстановитьПараметры(Конфигуратор, Параметры.ПутьКРепозиторию, 
				Параметры.КаталогОбработок, МассивКоммитов(), Журналы);

	СоздатьРезультатыКоманд();

КонецПроцедуры

РазобратьВходящиеПараметры();
СоздатьЖурналыЛогирования();
Если Не ПроверкаЗаполненияПараметров() Тогда
	ЗавершитьРаботу(-1);
КонецЕсли;

ПодготовитьОкружение();
ВыполнитьКоманды();

КодВозврата = ПолучитьКодВозврата();
Если КодВозврата < 0 Тогда
	Журналы.ОсновнойЖурнал.Ошибка("Выполнение скрипта завершено с ошибками!");
Иначе
	Журналы.ОсновнойЖурнал.Информация("Выполнение скрипта завершено!");
КонецЕсли;

Журналы.Вложенные.ФайловыйЖурнал.Закрыть();
ЗавершитьРаботу(КодВозврата);