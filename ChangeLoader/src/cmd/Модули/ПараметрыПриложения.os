///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с набором служебных параметров приложения
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// СВОЙСТВА ПРОДУКТА

#Использовать fs
#Использовать configor

Перем ФайлОбщегоЛога;
Перем ФайлЖурнала;

Перем Конфигуратор;

Перем КаталогЛогов;

Перем ИмяСервера;
Перем ИмяБазы;

Перем Пользователь;
Перем ПарольПользователя;
Перем КодРазблокировки;

// Выполняет установку параметров приложения (см. ChangeLoader.УстановитьПараметрыКоманды())
//
// Параметры:
//	 Приложение - КонсольноеПриложение - 
//
Процедура УстановитьПараметрыПриложения(Знач Приложение) Экспорт

	Команда = Приложение.ПолучитьКоманду();

	ФайлНастроек = Команда.ЗначениеОпции("connection");
	Если Не ПустаяСтрока(ФайлНастроек) Тогда
		МенеджерПараметров = Новый МенеджерПараметров();
		МенеджерПараметров.УстановитьФайлПараметров(ФайлНастроек);
		МенеджерПараметров.АвтоНастройка("");
		МенеджерПараметров.Прочитать();

		КаталогЛогов 		= МенеджерПараметров.Параметр("logs");
		
		ИмяСервера 			= МенеджерПараметров.Параметр("srvname");
		ИмяБазы 			= МенеджерПараметров.Параметр("ibname");

		Пользователь 		= МенеджерПараметров.Параметр("user");
		ПарольПользователя 	= МенеджерПараметров.Параметр("pwd");
		КодРазблокировки 	= МенеджерПараметров.Параметр("uc");

	Иначе
		КаталогЛогов 		= Команда.ЗначениеОпции("logs");

		ИмяСервера 			= Команда.ЗначениеОпции("srvname");
		ИмяБазы 			= Команда.ЗначениеОпции("ibname");

		Пользователь 		= Команда.ЗначениеОпции("user");
		ПарольПользователя 	= Команда.ЗначениеОпции("pwd");
		КодРазблокировки 	= Команда.ЗначениеОпции("uc");

	КонецЕсли;

	Если ЗначениеЗаполнено(КаталогЛогов) Тогда
		ФС.ОбеспечитьКаталог(КаталогЛогов);
	КонецЕсли;

КонецПроцедуры

Функция ПодключитьКонфигуратор() Экспорт

	Если Не Конфигуратор = Неопределено Тогда
		Возврат Конфигуратор;
	КонецЕсли;

	СтрокаПодключения = СтрШаблон("/IBConnectionString""Srvr=%1; Ref='%2'""", 
		   ИмяСервера(),
		   ИмяБазы()
    );

    Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.УстановитьКонтекст(СтрокаПодключения, 
            Пользователь(), 
            ПарольПользователя()
    );

    Если ЗначениеЗаполнено(КодРазблокировки) Тогда
        Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазблокировки);
    КонецЕсли;
 
    Возврат Конфигуратор;

КонецФункции

Процедура УстановитьПриложение(Знач КонсольноеПриложение) Экспорт

	Приложение = КонсольноеПриложение;

КонецПроцедуры

Функция КаталогЛогов() Экспорт
	
	Возврат КаталогЛогов;

КонецФункции

Функция ИмяСервера() Экспорт

	Возврат ИмяСервера;

КонецФункции

Функция ИмяБазы() Экспорт

	Возврат ИмяБазы;

КонецФункции

Функция Пользователь() Экспорт

	Возврат Пользователь;

КонецФункции

Функция ПарольПользователя() Экспорт

	Возврат ПарольПользователя;

КонецФункции

Функция ПолучитьКонфигуратор() Экспорт

	Возврат Конфигуратор;

КонецФункции

// ВерсияПродукта
//	Возвращает текущую версию продукта
//
// Возвращаемое значение:
//   Строка   - Значение текущей версии продукта
//
Функция ВерсияПродукта() Экспорт
	
	Возврат "1.1";
	
КонецФункции // ВерсияПродукта

// ИмяПродукта
//	Возвращает имя продукта
//
// Возвращаемое значение:
//   Строка   - Значение имени продукта
//
Функция ИмяПродукта() Экспорт
	
	Возврат "ChangeLoader";
	
КонецФункции // ИмяПродукта

///////////////////////////////////////////////////////////////////////////////
// ЛОГИРОВАНИЕ

//	Форматирование логов
//   См. описание метода "УстановитьРаскладку" библиотеки logos
//
Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

	Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции
	
// ИмяЛогаСистемы
//	Возвращает идентификатор лога приложения
//
// Возвращаемое значение:
//   Строка   - Значение идентификатора лога приложения
//
Функция ИмяЛогаСистемы() Экспорт
	
	Возврат "rtits.app." + ИмяПродукта();
	
КонецФункции // ИмяЛогаСистемы

Процедура УстановитьВыводВКонсольЛогаПриложения(Знач ТребуетсяВыводВКонсоль) Экспорт
	
	ВыводВКонсоль = Новый ЦветнойВыводЛогаКонсоль();
	
	ЛогПриложения = Логирование.ПолучитьЛог(ИмяЛогаСистемы());
	ЛогПриложения.ДобавитьСпособВывода(ВыводВКонсоль);

КонецПроцедуры

Процедура УстановитьФайлЛогаПриложения(Знач КаталогЛогов) Экспорт
	
	Если Не ЗначениеЗаполнено(КаталогЛогов) Тогда
		Возврат;
	КонецЕсли;

	ФС.ОбеспечитьКаталог(КаталогЛогов);
	ФайлОбщегоЛога = КаталогЛогов;
	
	ФайлЖурнала = Новый ВыводЛогаВФайл;
	ФайлЖурнала.ОткрытьФайл(ФайлОбщегоЛога, "windows-1251");

	ДобавитьВыводЛогаВФайл(Лог());

КонецПроцедуры

Функция Лог() Экспорт
	Возврат Логирование.ПолучитьЛог(ИмяЛогаСистемы());
КонецФункции

Процедура ДобавитьВыводЛогаВФайл(Знач ОбъектЛогирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ФайлОбщегоЛога) Тогда
		Возврат;
	КонецЕсли;

	ОбъектЛогирования.ДобавитьСпособВывода(ФайлЖурнала);
	
КонецПроцедуры